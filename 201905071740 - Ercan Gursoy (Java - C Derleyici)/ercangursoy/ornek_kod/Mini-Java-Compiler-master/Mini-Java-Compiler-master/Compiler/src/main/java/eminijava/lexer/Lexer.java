package eminijava.lexer;
/* The following code was generated by JFlex 1.6.1 */

/* MiniJava language lexer specification */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals,
   because the input is read twice and the methods used to parse
   the numbers are not very fast.
   For a production quality application (e.g. a Java compiler)
   this could be optimized */

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.6.1 from the specification file
 * <tt>E:/cc_workspace/Lexer/resources/java.flex</tt>
 */
public class Lexer {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int YYINITIAL = 0;
	public static final int STRING = 2;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1 };

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\7\1\3\1\2\1\100\1\101\1\1\16\7\4\0\1\3\1\63"
			+ "\1\71\1\0\1\6\1\0\1\65\1\77\1\51\1\52\1\5\1\67" + "\1\60\1\70\1\50\1\4\1\10\1\16\1\72\1\15\1\73\1\17"
			+ "\1\76\1\74\1\75\1\11\1\64\1\57\1\62\1\61\3\0\6\14" + "\5\6\1\12\6\6\1\45\4\6\1\13\2\6\1\55\1\20\1\56"
			+ "\1\0\1\6\1\0\1\25\1\21\1\27\1\33\1\24\1\36\1\46" + "\1\43\1\34\2\6\1\23\1\44\1\26\1\22\1\37\1\6\1\41"
			+ "\1\30\1\32\1\40\1\42\1\35\1\31\1\47\1\6\1\53\1\66" + "\1\54\1\0\6\7\1\102\32\7\2\0\4\6\4\0\1\6\2\0"
			+ "\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0" + "\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\21\0"
			+ "\160\7\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6" + "\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\7"
			+ "\2\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6\7\0\1\6" + "\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7"
			+ "\10\0\33\6\5\0\3\6\15\0\5\7\6\0\1\6\4\0\13\7" + "\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7"
			+ "\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0" + "\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7"
			+ "\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6\5\0\26\6" + "\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7"
			+ "\104\0\1\6\1\0\13\6\67\0\33\7\1\0\4\7\66\6\3\7" + "\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0\7\6"
			+ "\1\0\7\6\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6" + "\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7"
			+ "\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0" + "\3\6\2\7\2\0\12\7\4\6\7\0\1\6\5\0\3\7\1\0"
			+ "\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0" + "\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0"
			+ "\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6" + "\1\7\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0"
			+ "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0" + "\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7"
			+ "\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6" + "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7"
			+ "\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6" + "\2\7\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6"
			+ "\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6" + "\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7"
			+ "\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6" + "\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"
			+ "\1\0\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0" + "\2\7\1\0\2\6\6\0\2\6\2\7\2\0\12\7\22\0\2\7"
			+ "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6" + "\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"
			+ "\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6\17\0" + "\2\7\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7"
			+ "\1\0\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6\2\7" + "\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6"
			+ "\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7" + "\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6"
			+ "\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6" + "\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6"
			+ "\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6" + "\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6"
			+ "\1\0\6\7\2\0\12\7\2\0\4\6\40\0\1\6\27\0\2\7" + "\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7"
			+ "\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0" + "\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6"
			+ "\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6" + "\14\7\1\6\17\7\2\0\46\6\1\0\1\6\5\0\1\6\2\0"
			+ "\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0" + "\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0"
			+ "\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0" + "\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0\125\6\14\0"
			+ "\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0\3\6\17\0" + "\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7"
			+ "\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0" + "\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7"
			+ "\6\0\130\6\10\0\51\6\1\7\1\6\5\0\106\6\12\0\35\6" + "\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6\13\0"
			+ "\54\6\4\0\21\7\7\6\2\7\6\0\12\7\46\0\27\6\5\7" + "\4\0\65\6\12\7\1\0\35\7\2\0\13\7\6\0\12\7\15\0"
			+ "\1\6\130\0\5\7\57\6\21\7\7\6\4\0\12\7\21\0\11\7" + "\14\0\3\7\36\6\15\7\2\6\12\7\54\6\16\7\14\0\44\6"
			+ "\24\7\10\0\12\7\3\0\3\6\12\7\44\6\122\0\3\7\1\0" + "\25\7\4\6\1\7\4\6\3\7\2\6\11\0\300\6\47\7\25\0"
			+ "\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6" + "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"
			+ "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6" + "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\7"
			+ "\30\0\1\100\1\100\5\7\20\0\2\6\23\0\1\6\13\0\5\7" + "\5\0\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0\33\6"
			+ "\25\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6" + "\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6"
			+ "\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6" + "\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6"
			+ "\6\0\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6" + "\2\0\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0"
			+ "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0" + "\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0"
			+ "\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7" + "\2\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6"
			+ "\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6"
			+ "\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6" + "\1\7\4\0\12\7\1\0\31\6\7\0\1\7\120\6\2\7\45\0"
			+ "\11\6\2\0\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0" + "\12\6\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6"
			+ "\7\0\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7" + "\6\6\3\0\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7"
			+ "\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0" + "\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0"
			+ "\27\6\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6" + "\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6"
			+ "\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6" + "\11\0\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0"
			+ "\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0"
			+ "\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0" + "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"
			+ "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0" + "\20\7\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0"
			+ "\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0" + "\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0"
			+ "\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0" + "\3\7\4\0\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0"
			+ "\17\6\2\0\16\6\42\0\173\6\105\0\65\6\210\0\1\7\202\0"
			+ "\35\6\3\0\61\6\57\0\37\6\21\0\33\6\65\0\36\6\2\0" + "\44\6\4\0\10\6\1\0\5\6\52\0\236\6\2\0\12\7\u0356\0"
			+ "\6\6\2\0\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0" + "\27\6\252\0\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0"
			+ "\1\6\3\7\1\0\2\7\5\0\4\7\4\6\1\0\3\6\1\0" + "\33\6\4\0\3\7\4\0\1\7\40\0\35\6\203\0\66\6\12\0"
			+ "\26\6\12\0\23\6\215\0\111\6\u03b7\0\3\7\65\6\17\7\37\0"
			+ "\12\7\20\0\3\7\55\6\13\7\2\0\1\7\22\0\31\6\7\0" + "\12\7\6\0\3\7\44\6\16\7\1\0\12\7\100\0\3\7\60\6"
			+ "\16\7\4\6\13\0\12\7\u04a6\0\53\6\15\7\10\0\12\7\u0936\0"
			+ "\u036f\6\221\0\143\6\u0b9d\0\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6\13\0"
			+ "\1\6\56\7\20\0\4\7\15\6\u4060\0\2\6\u2163\0\5\7\3\0"
			+ "\26\7\2\0\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6\1\0" + "\107\6\1\0\2\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0"
			+ "\14\6\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0" + "\10\6\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6\1\0"
			+ "\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0" + "\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"
			+ "\31\6\1\0\37\6\1\0\31\6\1\0\10\6\2\0\62\7\u1600\0" + "\4\6\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\12\6\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0" + "\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0"
			+ "\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0" + "\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0"
			+ "\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0\21\6\5\0" + "\3\6\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0"
			+ "\336\6\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"
			+ "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\17\5"
			+ "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16" + "\1\17\1\20\1\21\1\22\1\23\2\1\1\24\1\25"
			+ "\1\26\1\27\2\30\1\1\1\31\1\2\1\0\1\32" + "\1\33\1\0\3\32\13\5\1\34\10\5\1\35\1\36"
			+ "\1\37\1\0\1\40\2\41\1\42\1\43\1\44\1\45" + "\1\46\1\47\1\50\1\51\1\0\1\52\2\53\2\32"
			+ "\4\5\1\54\5\5\1\55\10\5\1\0\1\41\1\56" + "\1\53\2\32\2\5\1\57\4\5\1\60\1\61\4\5"
			+ "\1\62\1\63\2\5\1\0\1\53\2\32\3\5\1\64" + "\1\5\1\65\1\66\1\67\4\5\1\0\1\53\2\32"
			+ "\1\5\1\70\1\5\1\71\1\72\1\73\1\74\1\5" + "\1\0\1\53\2\32\1\75\1\76\2\0\1\53\2\32"
			+ "\2\0\1\53\2\32\2\0\1\53\2\32\3\0\2\32" + "\1\0\1\77\1\0\2\32\2\0\2\32\2\0\2\32"
			+ "\2\0\2\32\2\0\2\32\2\0\1\32\4\0\1\100" + "\4\0";

	private static int[] zzUnpackAction() {
		int[] result = new int[226];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\103\0\206\0\311\0\206\0\u010c\0\206\0\u014f"
			+ "\0\u0192\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367"
			+ "\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f"
			+ "\0\u05c2\0\206\0\206\0\206\0\206\0\206\0\206\0\206"
			+ "\0\206\0\206\0\u0605\0\206\0\206\0\206\0\u0648\0\u068b"
			+ "\0\206\0\u06ce\0\206\0\u0711\0\u0754\0\206\0\u0797\0\206"
			+ "\0\u07da\0\u081d\0\u0860\0\206\0\u08a3\0\u08e6\0\u0929\0\u096c"
			+ "\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84"
			+ "\0\u0bc7\0\u0c0a\0\u0c4d\0\u014f\0\u0c90\0\u0cd3\0\u0d16\0\u0d59"
			+ "\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\206\0\206\0\206\0\u0ea8"
			+ "\0\206\0\u0eeb\0\u0f2e\0\206\0\206\0\206\0\206\0\206"
			+ "\0\206\0\206\0\206\0\u0f71\0\206\0\u0fb4\0\u0ff7\0\u103a"
			+ "\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u014f\0\u11cc\0\u120f"
			+ "\0\u1252\0\u1295\0\u12d8\0\u014f\0\u131b\0\u135e\0\u13a1\0\u13e4"
			+ "\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\206\0\206\0\u1576"
			+ "\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u014f\0\u16c5\0\u1708\0\u174b"
			+ "\0\u178e\0\u014f\0\u014f\0\u17d1\0\u1814\0\u1857\0\u189a\0\u014f"
			+ "\0\u014f\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f"
			+ "\0\u1ab2\0\u1af5\0\u014f\0\u1b38\0\u014f\0\u014f\0\u014f\0\u1b7b"
			+ "\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93"
			+ "\0\u014f\0\u1dd6\0\u014f\0\u014f\0\u014f\0\u014f\0\u1e19\0\u1e5c"
			+ "\0\u1e9f\0\u1ee2\0\u1f25\0\u014f\0\u014f\0\u1f68\0\u1fab\0\u1fee"
			+ "\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206"
			+ "\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e"
			+ "\0\u2461\0\u24a4\0\206\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3"
			+ "\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b"
			+ "\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23"
			+ "\0\u2a66\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\206\0\u2b72\0\u2bb5" + "\0\u2bf8\0\u2c3b";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[226];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"
			+ "\1\12\3\10\3\12\1\3\1\13\1\10\1\14\1\15" + "\1\10\1\16\1\17\1\20\1\10\1\21\1\10\1\22"
			+ "\1\23\1\24\1\25\1\10\1\26\1\27\1\10\1\30" + "\1\31\2\10\1\32\1\33\1\34\1\35\1\36\1\37"
			+ "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47" + "\1\50\1\51\1\52\1\53\5\12\2\3\1\5\1\3"
			+ "\1\54\1\55\1\56\15\54\1\57\50\54\1\60\11\54" + "\105\0\1\5\104\0\1\61\1\62\103\0\12\10\1\0"
			+ "\27\10\22\0\5\10\3\0\1\10\10\0\1\63\1\0" + "\1\64\1\65\1\0\1\66\1\67\1\70\3\0\1\64"
			+ "\5\0\1\65\40\0\1\66\2\70\1\0\1\70\14\0" + "\2\12\1\64\2\0\3\12\3\0\1\64\46\0\5\12"
			+ "\12\0\12\10\1\0\1\10\1\71\25\10\22\0\5\10" + "\3\0\1\10\6\0\12\10\1\0\3\10\1\72\23\10"
			+ "\22\0\5\10\3\0\1\10\6\0\12\10\1\0\2\10" + "\1\73\5\10\1\74\16\10\22\0\5\10\3\0\1\10"
			+ "\6\0\12\10\1\0\3\10\1\75\23\10\22\0\5\10" + "\3\0\1\10\6\0\12\10\1\0\2\10\1\76\24\10"
			+ "\22\0\5\10\3\0\1\10\6\0\12\10\1\0\11\10" + "\1\77\1\10\1\100\13\10\22\0\5\10\3\0\1\10"
			+ "\6\0\12\10\1\0\20\10\1\101\1\10\1\102\4\10" + "\22\0\5\10\3\0\1\10\6\0\12\10\1\0\5\10"
			+ "\1\103\7\10\1\104\11\10\22\0\5\10\3\0\1\10" + "\6\0\12\10\1\0\22\10\1\105\4\10\22\0\5\10"
			+ "\3\0\1\10\6\0\12\10\1\0\4\10\1\106\22\10" + "\22\0\5\10\3\0\1\10\6\0\12\10\1\0\17\10"
			+ "\1\107\7\10\22\0\5\10\3\0\1\10\6\0\12\10" + "\1\0\3\10\1\110\23\10\22\0\5\10\3\0\1\10"
			+ "\6\0\12\10\1\0\1\10\1\111\25\10\22\0\5\10" + "\3\0\1\10\6\0\12\10\1\0\4\10\1\112\22\10"
			+ "\22\0\5\10\3\0\1\10\6\0\12\10\1\0\11\10" + "\1\113\14\10\1\114\22\0\5\10\3\0\1\10\61\0"
			+ "\1\115\106\0\1\116\103\0\1\117\106\0\1\120\10\0" + "\1\54\2\0\15\54\1\0\50\54\1\0\11\54\2\0"
			+ "\1\56\100\0\1\121\2\0\5\121\1\122\4\121\2\122" + "\1\123\1\124\1\125\4\121\1\126\3\121\1\127\3\121"
			+ "\1\130\2\121\1\131\27\121\1\132\1\122\2\123\1\121" + "\1\123\1\133\3\0\1\61\1\4\1\5\100\61\5\62"
			+ "\1\134\75\62\10\0\1\63\1\0\1\135\2\0\1\66" + "\1\67\1\70\3\0\1\135\46\0\1\66\2\70\1\0"
			+ "\1\70\14\0\1\136\1\137\2\0\4\137\1\0\1\137" + "\2\0\2\137\1\0\1\137\3\0\1\137\2\0\1\137"
			+ "\33\0\5\137\14\0\1\140\1\0\1\135\2\0\3\140" + "\3\0\1\135\46\0\3\140\1\0\1\140\14\0\1\70"
			+ "\1\0\1\135\2\0\3\70\3\0\1\135\46\0\3\70" + "\1\0\1\70\14\0\1\141\1\0\1\135\2\0\3\141"
			+ "\3\0\1\135\46\0\3\141\1\0\1\141\12\0\12\10" + "\1\0\1\10\1\142\25\10\22\0\5\10\3\0\1\10"
			+ "\6\0\12\10\1\0\5\10\1\143\21\10\22\0\5\10" + "\3\0\1\10\6\0\12\10\1\0\7\10\1\144\17\10"
			+ "\22\0\5\10\3\0\1\10\6\0\12\10\1\0\11\10" + "\1\145\15\10\22\0\5\10\3\0\1\10\6\0\12\10"
			+ "\1\0\14\10\1\146\12\10\22\0\5\10\3\0\1\10" + "\6\0\12\10\1\0\4\10\1\147\22\10\22\0\5\10"
			+ "\3\0\1\10\6\0\12\10\1\0\4\10\1\150\22\10" + "\22\0\5\10\3\0\1\10\6\0\12\10\1\0\12\10"
			+ "\1\151\14\10\22\0\5\10\3\0\1\10\6\0\12\10" + "\1\0\17\10\1\152\7\10\22\0\5\10\3\0\1\10"
			+ "\6\0\12\10\1\0\13\10\1\153\13\10\22\0\5\10" + "\3\0\1\10\6\0\12\10\1\0\11\10\1\154\15\10"
			+ "\22\0\5\10\3\0\1\10\6\0\12\10\1\0\13\10" + "\1\155\13\10\22\0\5\10\3\0\1\10\6\0\12\10"
			+ "\1\0\2\10\1\156\24\10\22\0\5\10\3\0\1\10" + "\6\0\12\10\1\0\1\157\26\10\22\0\5\10\3\0"
			+ "\1\10\6\0\12\10\1\0\11\10\1\160\15\10\22\0" + "\5\10\3\0\1\10\6\0\12\10\1\0\13\10\1\161"
			+ "\13\10\22\0\5\10\3\0\1\10\6\0\12\10\1\0" + "\13\10\1\162\13\10\22\0\5\10\3\0\1\10\6\0"
			+ "\12\10\1\0\20\10\1\163\6\10\22\0\5\10\3\0" + "\1\10\6\0\12\10\1\0\7\10\1\164\17\10\22\0"
			+ "\5\10\3\0\1\10\16\0\1\165\74\0\1\123\4\0" + "\3\123\52\0\3\123\1\0\1\123\14\0\1\166\4\0"
			+ "\3\166\52\0\3\166\1\0\1\166\4\0\4\62\1\5" + "\1\134\75\62\10\0\1\136\1\137\1\167\1\0\4\137"
			+ "\1\0\1\137\1\0\1\167\2\137\1\0\1\137\3\0" + "\1\137\2\0\1\137\33\0\5\137\14\0\2\170\1\167"
			+ "\1\0\4\170\1\0\1\170\1\0\1\167\2\170\1\0" + "\1\170\3\0\1\170\2\0\1\170\33\0\5\170\14\0"
			+ "\1\171\1\0\1\135\2\0\3\171\3\0\1\135\46\0" + "\3\171\1\0\1\171\14\0\1\172\1\0\1\135\2\0"
			+ "\3\172\3\0\1\135\46\0\3\172\1\0\1\172\12\0" + "\12\10\1\0\2\10\1\173\24\10\22\0\5\10\3\0"
			+ "\1\10\6\0\12\10\1\0\25\10\1\174\1\10\22\0" + "\5\10\3\0\1\10\6\0\12\10\1\0\3\10\1\175"
			+ "\23\10\22\0\5\10\3\0\1\10\6\0\12\10\1\0" + "\3\10\1\176\23\10\22\0\5\10\3\0\1\10\6\0"
			+ "\12\10\1\0\7\10\1\177\17\10\22\0\5\10\3\0" + "\1\10\6\0\12\10\1\0\11\10\1\200\15\10\22\0"
			+ "\5\10\3\0\1\10\6\0\12\10\1\0\3\10\1\201" + "\23\10\22\0\5\10\3\0\1\10\6\0\12\10\1\0"
			+ "\3\10\1\202\23\10\22\0\5\10\3\0\1\10\6\0" + "\12\10\1\0\7\10\1\203\17\10\22\0\5\10\3\0"
			+ "\1\10\6\0\12\10\1\0\2\10\1\204\24\10\22\0" + "\5\10\3\0\1\10\6\0\12\10\1\0\7\10\1\205"
			+ "\17\10\22\0\5\10\3\0\1\10\6\0\12\10\1\0" + "\2\10\1\206\24\10\22\0\5\10\3\0\1\10\6\0"
			+ "\12\10\1\0\17\10\1\207\7\10\22\0\5\10\3\0" + "\1\10\6\0\12\10\1\0\12\10\1\210\14\10\22\0"
			+ "\5\10\3\0\1\10\6\0\12\10\1\0\5\10\1\211" + "\21\10\22\0\5\10\3\0\1\10\6\0\12\10\1\0"
			+ "\13\10\1\212\13\10\22\0\5\10\3\0\1\10\6\0" + "\12\10\1\0\11\10\1\213\15\10\22\0\5\10\3\0"
			+ "\1\10\73\0\1\214\17\0\2\215\1\167\1\0\4\215" + "\1\0\1\215\1\0\1\167\2\215\1\0\1\215\3\0"
			+ "\1\215\2\0\1\215\33\0\5\215\14\0\1\216\1\0" + "\1\135\2\0\3\216\3\0\1\135\46\0\3\216\1\0"
			+ "\1\216\14\0\1\217\1\0\1\135\2\0\3\217\3\0" + "\1\135\46\0\3\217\1\0\1\217\12\0\12\10\1\0"
			+ "\3\10\1\220\23\10\22\0\5\10\3\0\1\10\6\0" + "\12\10\1\0\11\10\1\221\15\10\22\0\5\10\3\0"
			+ "\1\10\6\0\12\10\1\0\5\10\1\222\21\10\22\0" + "\5\10\3\0\1\10\6\0\12\10\1\0\7\10\1\223"
			+ "\17\10\22\0\5\10\3\0\1\10\6\0\12\10\1\0" + "\13\10\1\224\13\10\22\0\5\10\3\0\1\10\6\0"
			+ "\12\10\1\0\15\10\1\225\11\10\22\0\5\10\3\0" + "\1\10\6\0\12\10\1\0\3\10\1\226\23\10\22\0"
			+ "\5\10\3\0\1\10\6\0\12\10\1\0\3\10\1\227" + "\23\10\22\0\5\10\3\0\1\10\6\0\12\10\1\0"
			+ "\13\10\1\230\13\10\22\0\5\10\3\0\1\10\6\0" + "\12\10\1\0\20\10\1\231\6\10\22\0\5\10\3\0"
			+ "\1\10\6\0\12\10\1\0\5\10\1\232\21\10\22\0" + "\5\10\3\0\1\10\6\0\12\10\1\0\3\10\1\233"
			+ "\23\10\22\0\5\10\3\0\1\10\74\0\1\234\16\0" + "\2\235\1\167\1\0\4\235\1\0\1\235\1\0\1\167"
			+ "\2\235\1\0\1\235\3\0\1\235\2\0\1\235\33\0" + "\5\235\14\0\1\236\1\0\1\135\2\0\3\236\3\0"
			+ "\1\135\46\0\3\236\1\0\1\236\14\0\1\237\1\0" + "\1\135\2\0\3\237\3\0\1\135\46\0\3\237\1\0"
			+ "\1\237\12\0\12\10\1\0\4\10\1\240\22\10\22\0" + "\5\10\3\0\1\10\6\0\12\10\1\0\22\10\1\241"
			+ "\4\10\22\0\5\10\3\0\1\10\6\0\12\10\1\0" + "\12\10\1\242\14\10\22\0\5\10\3\0\1\10\6\0"
			+ "\12\10\1\0\6\10\1\243\20\10\22\0\5\10\3\0" + "\1\10\6\0\12\10\1\0\6\10\1\244\20\10\22\0"
			+ "\5\10\3\0\1\10\6\0\12\10\1\0\5\10\1\245" + "\21\10\22\0\5\10\3\0\1\10\6\0\12\10\1\0"
			+ "\25\10\1\246\1\10\22\0\5\10\3\0\1\10\6\0" + "\12\10\1\0\23\10\1\247\3\10\22\0\5\10\3\0"
			+ "\1\10\73\0\1\250\17\0\2\251\1\167\1\0\4\251" + "\1\0\1\251\1\0\1\167\2\251\1\0\1\251\3\0"
			+ "\1\251\2\0\1\251\33\0\5\251\14\0\1\252\1\0" + "\1\135\2\0\3\252\3\0\1\135\46\0\3\252\1\0"
			+ "\1\252\14\0\1\253\1\0\1\135\2\0\3\253\3\0" + "\1\135\46\0\3\253\1\0\1\253\12\0\12\10\1\0"
			+ "\5\10\1\254\21\10\22\0\5\10\3\0\1\10\6\0" + "\12\10\1\0\7\10\1\255\17\10\22\0\5\10\3\0"
			+ "\1\10\6\0\12\10\1\0\27\10\1\256\21\0\5\10" + "\3\0\1\10\75\0\1\257\15\0\2\260\1\167\1\0"
			+ "\4\260\1\0\1\260\1\0\1\167\2\260\1\0\1\260" + "\3\0\1\260\2\0\1\260\33\0\5\260\14\0\1\261"
			+ "\1\0\1\135\2\0\3\261\3\0\1\135\46\0\3\261" + "\1\0\1\261\14\0\1\262\1\0\1\135\2\0\3\262"
			+ "\3\0\1\135\46\0\3\262\1\0\1\262\26\0\1\263" + "\75\0\1\264\75\0\2\265\1\167\1\0\4\265\1\0"
			+ "\1\265\1\0\1\167\2\265\1\0\1\265\3\0\1\265" + "\2\0\1\265\33\0\5\265\14\0\1\266\1\0\1\135"
			+ "\2\0\3\266\3\0\1\135\46\0\3\266\1\0\1\266" + "\14\0\1\267\1\0\1\135\2\0\3\267\3\0\1\135"
			+ "\46\0\3\267\1\0\1\267\44\0\1\270\140\0\1\271" + "\14\0\2\272\1\167\1\0\4\272\1\0\1\272\1\0"
			+ "\1\167\2\272\1\0\1\272\3\0\1\272\2\0\1\272" + "\33\0\5\272\14\0\1\273\1\0\1\135\2\0\3\273"
			+ "\3\0\1\135\46\0\3\273\1\0\1\273\14\0\1\274" + "\1\0\1\135\2\0\3\274\3\0\1\135\46\0\3\274"
			+ "\1\0\1\274\36\0\1\275\143\0\1\276\17\0\2\277" + "\1\167\1\0\4\277\1\0\1\277\1\0\1\167\2\277"
			+ "\1\0\1\277\3\0\1\277\2\0\1\277\33\0\5\277" + "\14\0\1\300\1\0\1\135\2\0\3\300\3\0\1\135"
			+ "\46\0\3\300\1\0\1\300\14\0\1\301\1\0\1\135" + "\2\0\3\301\3\0\1\135\46\0\3\301\1\0\1\301"
			+ "\54\0\1\302\127\0\1\303\15\0\2\304\1\167\1\0" + "\4\304\1\0\1\304\1\0\1\167\2\304\1\0\1\304"
			+ "\3\0\1\304\2\0\1\304\33\0\5\304\14\0\1\305" + "\1\0\1\135\2\0\3\305\3\0\1\135\46\0\3\305"
			+ "\1\0\1\305\14\0\1\306\1\0\1\135\2\0\3\306" + "\3\0\1\135\46\0\3\306\1\0\1\306\43\0\1\307"
			+ "\53\0\2\310\1\167\1\0\4\310\1\0\1\310\1\0" + "\1\167\2\310\1\0\1\310\3\0\1\310\2\0\1\310"
			+ "\33\0\5\310\14\0\1\311\1\0\1\135\2\0\3\311" + "\3\0\1\135\46\0\3\311\1\0\1\311\14\0\1\312"
			+ "\1\0\1\135\2\0\3\312\3\0\1\135\46\0\3\312" + "\1\0\1\312\45\0\1\313\51\0\2\314\1\167\1\0"
			+ "\4\314\1\0\1\314\1\0\1\167\2\314\1\0\1\314" + "\3\0\1\314\2\0\1\314\33\0\5\314\14\0\1\315"
			+ "\1\0\1\135\2\0\3\315\3\0\1\135\46\0\3\315" + "\1\0\1\315\14\0\1\316\1\0\1\135\2\0\3\316"
			+ "\3\0\1\135\46\0\3\316\1\0\1\316\40\0\1\317" + "\56\0\2\320\1\167\1\0\4\320\1\0\1\320\1\0"
			+ "\1\167\2\320\1\0\1\320\3\0\1\320\2\0\1\320" + "\33\0\5\320\14\0\1\321\1\0\1\135\2\0\3\321"
			+ "\3\0\1\135\46\0\3\321\1\0\1\321\14\0\1\322" + "\1\0\1\135\2\0\3\322\3\0\1\135\46\0\3\322"
			+ "\1\0\1\322\32\0\1\323\64\0\2\324\1\167\1\0" + "\4\324\1\0\1\324\1\0\1\167\2\324\1\0\1\324"
			+ "\3\0\1\324\2\0\1\324\33\0\5\324\14\0\1\325" + "\1\0\1\135\2\0\3\325\3\0\1\135\46\0\3\325"
			+ "\1\0\1\325\14\0\1\326\1\0\1\135\2\0\3\326" + "\3\0\1\135\46\0\3\326\1\0\1\326\36\0\1\327"
			+ "\60\0\2\330\1\167\1\0\4\330\1\0\1\330\1\0" + "\1\167\2\330\1\0\1\330\3\0\1\330\2\0\1\330"
			+ "\33\0\5\330\14\0\1\331\1\0\1\135\2\0\3\331" + "\3\0\1\135\46\0\3\331\1\0\1\331\14\0\1\332"
			+ "\1\0\1\135\2\0\3\332\3\0\1\135\46\0\3\332" + "\1\0\1\332\27\0\1\333\67\0\2\334\1\167\1\0"
			+ "\4\334\1\0\1\334\1\0\1\167\2\334\1\0\1\334" + "\3\0\1\334\2\0\1\334\33\0\5\334\14\0\1\335"
			+ "\1\0\1\135\2\0\3\335\3\0\1\135\46\0\3\335" + "\1\0\1\335\32\0\1\336\66\0\1\167\10\0\1\167"
			+ "\67\0\1\337\1\0\1\135\2\0\3\337\3\0\1\135" + "\46\0\3\337\1\0\1\337\14\0\1\340\1\0\1\135"
			+ "\2\0\3\340\3\0\1\135\46\0\3\340\1\0\1\340" + "\14\0\1\341\1\0\1\135\2\0\3\341\3\0\1\135"
			+ "\46\0\3\341\1\0\1\341\14\0\1\342\1\0\1\135" + "\2\0\3\342\3\0\1\135\46\0\3\342\1\0\1\342"
			+ "\16\0\1\135\10\0\1\135\57\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[11390];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unknown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\2\0\1\11\1\1\1\11\1\1\1\11\22\1\11\11"
			+ "\1\1\3\11\2\1\1\11\1\1\1\11\2\1\1\11" + "\1\1\1\11\1\1\1\0\1\1\1\11\1\0\27\1"
			+ "\3\11\1\0\1\11\2\1\10\11\1\0\1\11\27\1" + "\1\0\2\11\24\1\1\0\17\1\1\0\13\1\1\0"
			+ "\5\1\2\0\3\1\2\0\3\1\2\0\3\1\3\0" + "\2\1\1\0\1\11\1\0\2\1\2\0\2\1\2\0"
			+ "\2\1\2\0\2\1\2\0\2\1\2\0\1\1\4\0" + "\1\11\4\0";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[226];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/**
	 * The number of occupied positions in zzBuffer beyond zzEndRead. When a
	 * lead/high surrogate has been read from the input stream into the final
	 * zzBuffer position, this will have a value of 1; otherwise, it will have a
	 * value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/* user code: */
	StringBuilder string = new StringBuilder();

	private JSymbol symbol(Token type) {
		return new JSymbol(type, yyline + 1, yycolumn + 1);
	}

	private JSymbol symbol(Token type, Object value) {
		return new JSymbol(type, yyline + 1, yycolumn + 1, value);
	}

	/**
	 * assumes correct representation of a long value for specified radix in
	 * scanner buffer from <code>start</code> to <code>end</code>
	 */
	private long parseLong(int start, int end, int radix) {
		long result = 0;
		long digit;

		for (int i = start; i < end; i++) {
			digit = Character.digit(yycharat(i), radix);
			result *= radix;
			result += digit;
		}

		return result;
	}

	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	public Lexer(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x110000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 2886) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do {
				map[j++] = value;
			} while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 *
	 * @exception java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzBuffer.length * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0) {
			throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
		}
		if (numRead > 0) {
			zzEndRead += numRead;
			/*
			 * If numRead == requested, we might have requested to few chars to
			 * encode a full Unicode character. We assume that a Reader would
			 * otherwise never return half characters.
			 */
			if (numRead == requested) {
				if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				}
			}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null) {
			zzReader.close();
		}
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 *
	 * Internal scan buffer is resized down to its initial length, if it has
	 * grown.
	 *
	 * @param reader the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		zzFinalHighSurrogate = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
		if (zzBuffer.length > ZZ_BUFFERSIZE) {
			zzBuffer = new char[ZZ_BUFFERSIZE];
		}
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 *
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength()) {
			zzScanError(ZZ_PUSHBACK_2BIG);
		}

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException if any I/O-Error occurs
	 */
	public JSymbol yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL += zzCharCount) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch (zzCh) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR) {
						zzR = false;
					} else {
						yyline++;
						yycolumn = 0;
					}
					break;
				case '\t':
					zzR = false;
					yycolumn += 4;
					break;
				default:
					zzR = false;
					yycolumn += zzCharCount;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one
				// line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL) {
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				} else if (zzAtEOF) {
					zzPeek = false;
				} else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof) {
						zzPeek = false;
					} else {
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
					}
				}
				if (zzPeek) {
					yyline--;
				}
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) {
						break zzForAction;
					}
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) {
							break zzForAction;
						}
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				{
					return symbol(Token.EOF);
				}
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 1: {
					return symbol(Token.BAD);
				}
				case 65:
					break;
				case 2: { /* ignore */
				}
				case 66:
					break;
				case 3: {
					return symbol(Token.DIV);
				}
				case 67:
					break;
				case 4: {
					return symbol(Token.TIMES);
				}
				case 68:
					break;
				case 5: {
					return symbol(Token.ID, yytext());
				}
				case 69:
					break;
				case 6: {
					return symbol(Token.INTLIT, new Integer(yytext()));
				}
				case 70:
					break;
				case 7: {
					return symbol(Token.DOT);
				}
				case 71:
					break;
				case 8: {
					return symbol(Token.LPAREN);
				}
				case 72:
					break;
				case 9: {
					return symbol(Token.RPAREN);
				}
				case 73:
					break;
				case 10: {
					return symbol(Token.LBRACE);
				}
				case 74:
					break;
				case 11: {
					return symbol(Token.RBRACE);
				}
				case 75:
					break;
				case 12: {
					return symbol(Token.LBRACKET);
				}
				case 76:
					break;
				case 13: {
					return symbol(Token.RBRACKET);
				}
				case 77:
					break;
				case 14: {
					return symbol(Token.SEMICOLON);
				}
				case 78:
					break;
				case 15: {
					return symbol(Token.COMMA);
				}
				case 79:
					break;
				case 16: {
					return symbol(Token.EQSIGN);
				}
				case 80:
					break;
				case 17: {
					return symbol(Token.LESSTHAN);
				}
				case 81:
					break;
				case 18: {
					return symbol(Token.BANG);
				}
				case 82:
					break;
				case 19: {
					return symbol(Token.COLON);
				}
				case 83:
					break;
				case 20: {
					return symbol(Token.PLUS);
				}
				case 84:
					break;
				case 21: {
					return symbol(Token.MINUS);
				}
				case 85:
					break;
				case 22: {
					yybegin(STRING);
					string.setLength(0);
				}
				case 86:
					break;
				case 23: {
					string.append(yytext());
				}
				case 87:
					break;
				case 24: {
					throw new RuntimeException("Unterminated string at end of line");
				}
				case 88:
					break;
				case 25: {
					yybegin(YYINITIAL);
					return symbol(Token.STRINGLIT, string.toString());
				}
				case 89:
					break;
				case 26: {
					return symbol(Token.INTLIT, new Integer((int) parseLong(0, yylength(), 8)));
				}
				case 90:
					break;
				case 27: {
					return symbol(Token.INTLIT, new Long(yytext().substring(0, yylength() - 1)));
				}
				case 91:
					break;
				case 28: {
					return symbol(Token.IF);
				}
				case 92:
					break;
				case 29: {
					return symbol(Token.EQUALS);
				}
				case 93:
					break;
				case 30: {
					return symbol(Token.AND);
				}
				case 94:
					break;
				case 31: {
					return symbol(Token.OR);
				}
				case 95:
					break;
				case 32: {
					throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");
				}
				case 96:
					break;
				case 33: {
					char val = (char) Integer.parseInt(yytext().substring(1), 8);
					string.append(val);
				}
				case 97:
					break;
				case 34: {
					string.append('\\');
				}
				case 98:
					break;
				case 35: {
					string.append('\b');
				}
				case 99:
					break;
				case 36: {
					string.append('\n');
				}
				case 100:
					break;
				case 37: {
					string.append('\t');
				}
				case 101:
					break;
				case 38: {
					string.append('\f');
				}
				case 102:
					break;
				case 39: {
					string.append('\r');
				}
				case 103:
					break;
				case 40: {
					string.append('\"');
				}
				case 104:
					break;
				case 41: {
					string.append('\'');
				}
				case 105:
					break;
				case 42: {
					return symbol(Token.INTLIT, new Long(parseLong(0, yylength() - 1, 8)));
				}
				case 106:
					break;
				case 43: {
					return symbol(Token.INTLIT, new Integer((int) parseLong(2, yylength(), 16)));
				}
				case 107:
					break;
				case 44: {
					return symbol(Token.NEW);
				}
				case 108:
					break;
				case 45: {
					return symbol(Token.INT);
				}
				case 109:
					break;
				case 46: {
					return symbol(Token.INTLIT, new Long(parseLong(2, yylength() - 1, 16)));
				}
				case 110:
					break;
				case 47: {
					return symbol(Token.ELSE);
				}
				case 111:
					break;
				case 48: {
					return symbol(Token.TRUE);
				}
				case 112:
					break;
				case 49: {
					return symbol(Token.THIS);
				}
				case 113:
					break;
				case 50: {
					return symbol(Token.VOID);
				}
				case 114:
					break;
				case 51: {
					return symbol(Token.MAIN);
				}
				case 115:
					break;
				case 52: {
					return symbol(Token.CLASS);
				}
				case 116:
					break;
				case 53: {
					return symbol(Token.SIDEF);
				}
				case 117:
					break;
				case 54: {
					return symbol(Token.WHILE);
				}
				case 118:
					break;
				case 55: {
					return symbol(Token.FALSE);
				}
				case 119:
					break;
				case 56: {
					return symbol(Token.LENGTH);
				}
				case 120:
					break;
				case 57: {
					return symbol(Token.STATIC);
				}
				case 121:
					break;
				case 58: {
					return symbol(Token.PUBLIC);
				}
				case 122:
					break;
				case 59: {
					return symbol(Token.RETURN);
				}
				case 123:
					break;
				case 60: {
					return symbol(Token.STRING);
				}
				case 124:
					break;
				case 61: {
					return symbol(Token.BOOLEAN);
				}
				case 125:
					break;
				case 62: {
					return symbol(Token.EXTENDS);
				}
				case 126:
					break;
				case 63: {
					return symbol(Token.INTLIT, new Integer(Integer.MIN_VALUE));
				}
				case 127:
					break;
				case 64: {
					return symbol(Token.PRINTLN);
				}
				case 128:
					break;
				default:
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
